# Default values for the readyset adapter and server, and consul
# This is a YAML-formatted file.

# Disclaimer: Removing any of the following items from the list
# will likely break things in unspectacular ways.
readyset:

  # readyset.deployment -- (required) A name that uniquely identifies the readyset-deployment
  deployment:

  # readyset.authority_address -- (optional) In case you have a Consul cluster already deployed, you will need to configure consul.enabled=false
  # and set this value to the Consul cluster hostname (optionally, adding the port).
  #
  # Default port for the authority_address is 8500, if you have a custom port please include it in the value.
  #
  # For example: consul.example.com:8585
  #
  authority_address: ""

  # readyset.queryCachingMode -- (optional) tells ReadySet how it should cache queries
  # Accepted values: explicit (default), async, in-request-path
  queryCachingMode: explicit

  # readyset.adapter -- all configurable options for the readyset-adapter
  adapter:

    # readyset.adapter.type -- (optional) Select the Readyset Adapter type.
    # Accepted values: "postgresql" (default), "mysql".
    type: "postgresql"

    # readyset.adapter.queryLogAdHoc -- (optional) Exposes queries to the prometheus exporter; Warning: increased probablility for high-cardinality series
    queryLogAdHoc: true

    # readyset.adapter.statementLogging -- (optional) Writes all statements to the adapter log file
    statementLogging: false

    # readyset.adapter.ingressEnabled -- (optional) Whether to enable ingress as opposed to a LoadBalancer; Currently a noop
    ingressEnabled: true

    # readyset.adapter.imageRepository -- (optional) Specify the container repository URL without a trailing slash; Default: "public.ecr.aws/readyset"
    imageRepository: # "public.ecr.aws/readyset" # No trailing slash

    # readyset.adapter.imageTag -- (optional) Specify the readyset-adapter tag; Defaults to the current monthly release
    imageTag:

    service:
      # readyset.adapter.service.type (optional) Specify the type or Kubernetes Service to be deployed; Default: "LoadBalancer"
      type: "LoadBalancer"
      # readyset.adapter.service.annotations -- (optional) List of annotations to add to Readyset Adapter service resource.
      #
      # In case you are using AWS Load Balancer Controller in your cluster you can add such annotations here. Have in mind that
      # AWS Load Balancer Controller > v2.2.0 defaults to an internal NLB.
      #
      # For example if you want to deploy an external NLB in AWS you could use the following example:
      #
      # annotations:
      #   - service.beta.kubernetes.io/aws-load-balancer-type: external
      #   - service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      #   - service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
      annotations: {}

      # readyset.adapter.service.port -- (optional) Port the application, or other SQL clients will connect to; Defaults to PostgreSQL's port, 5432.
      port: 5432 # Or 3306 for MySQL

      # readyset.adapter.service.httpPort -- (optional) Port number the on which the adapter listens, serving a prometheus /metrics endpoint via HTTP
      httpPort: 6034

    # readyset.adapter.resources -- (optional) See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #
    # In the template we configure memory requests & limits with the same value to avoid Kubernetes OOM Kills.
    # Also, we do not configure CPU limits to avoid Kubernetes CPU throttling.
    #
    # If readyset.resources.limits.memory is configured, it is used as readyset.resources.requests.memory value.
    #
    resources:
      requests:
        storage: "50Gi"
        cpu: "500m"
        memory: "2Gi"
      limits:
        storage: "1Ti"

  # readyset.server -- all configurable options for the readyset-server
  server:
    # readyset.server.replicationTables -- (optional) Comma separated list of schema, table pairs delimited by a '.'
    #
    # Example: To only replicate/snapshot all tables in the public schema, and only
    # mytable in the myschema schema, you would pass "public.*,myschema.mytable"
    #
    # replicationTables:

    # readyset.server.statementLogging -- (optional) Writes all statements to the adapter log file
    statementLogging: false

    service:
      # readyset.server.service.type (optional) Specify the type or Kubernetes Service to be deployed; Default: "LoadBalancer"
      type: "LoadBalancer"
      # readyset.server.service.annotations -- (optional) List of annotations to add to Readyset Adapter service resource.
      #
      # In case you are using AWS Load Balancer Controller in your cluster you can add such annotations here. Have in mind that
      # AWS Load Balancer Controller > v2.2.0 defaults to an internal NLB.
      #
      # For example if you want to deploy an external NLB in AWS you could use the following example:
      #
      # annotations:
      #   - service.beta.kubernetes.io/aws-load-balancer-type: external
      #   - service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      #   - service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
      annotations: {}

      # readyset.server.port -- (optional) Port the application, or other SQL clients will connect to; Defaults to PostgreSQL's port, 5432.
      port: 5432 # Or 3306 for MySQL

      # readyset.server.httpPort -- (optional) Port number the on which the adapter listens, serving a prometheus /metrics endpoint via HTTP
      httpPort: 6033

    # readyset.server.resources -- (optional) See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    #
    # In the template we configure memory requests & limits with the same value to avoid Kubernetes OOM Kills.
    # Also, we do not configure CPU limits to avoid Kubernetes CPU throttling.
    #
    # If readyset.resources.limits.memory is configured, it is used as readyset.resources.requests.memory value.
    #
    resources:
      requests:
        storage: "100Gi"
        cpu: "1000m"
        memory: "4Gi"
      limits:
        storage: "1Ti"

    # readyset.server.imageRepository -- (optional) Specify the container repository URL without a trailing slash; Default: "public.ecr.aws/readyset"
    # imageRepository: # "public.ecr.aws/readyset" # No trailing slash

    # readyset.server.imageTag -- (optional) Specify the readyset-server tag; Defaults to the current monthly release
    imageTag:

# kubernetes -- See https://kubernetes.io/docs/
kubernetes:
  # kubernetes.storageClass -- (optional) Specify the kubernetes storage class
  storageClass: # Leave empty to use default provisioner

# This configures the underlying consul service with 3 replicas
#
# Make sure you are running this chart in a cluster with at least 3 scheduleable worker nodes,
# as Consul Server pods have a PodAntiAffinity rule that prohibits sharing nodes for these pods.
#
# See: https://developer.hashicorp.com/consul/docs/k8s/helm for more information
# on how to configure consul.
consul:

  # consul.enabled -- Set this to true to deploy a Consul cluster using the official Helm Chart as a dependency of Readyset Helm Chart
  #
  # If you currently have a Consul cluster that you would like to use, set this as false and configure readyset.authority_address
  enabled: true

  # consul.server -- Options for the consul server
  server:

    # consul.server.replicas -- Number of replicas to run
    replicas: 3

    # consul.server.bootstrapExpect -- Number of replicas expected to be available to reach quorum
    bootstrapExpect: 3

    # consul.server.resources -- See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "500m"

