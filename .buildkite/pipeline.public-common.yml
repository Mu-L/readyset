# This file contains common build steps that can be included in other pipeline contexts.

# Non-buildkite nodes to re-use:
common_values:
  retry: &retry_on_agent_kill
    automatic: &agent_kill_conditions
      - signal_reason: agent_stop  # spot instance killed by AWS
        limit: 3
      - exit_status: -1            # agent timed out
        signal_reason: none
        limit: 3

env:
  ECR_PLUGIN_VERSION: "v2.10.0"
  DOCKER_PLUGIN_VERSION: "v5.13.0"
  DOCKER_LOGIN_PLUGIN_VERSION: "v3.0.0"
  DOCKER_COMPOSE_PLUGIN_VERSION: "v5.10.0"
  BUILDKIT_PROGRESS: "plain"

steps:

  # NOTE:  This entire pipeline has a dependency on the 'build-image' step.  Any step that uploads
  # it must have a "depends_on: build-image" set.  Putting "depends_on" on these steps won't do the
  # trick and may in fact interfere with correct buildkite step scheduling.

  - label: ':rust: Check rustfmt'
    key: check-rustfmt
    commands:
      - '[ -d public ] && cd public'
      - "cargo --locked fmt -- --check"
    plugins:
      - docker#${DOCKER_PLUGIN_VERSION}:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:${BUILDKITE_COMMIT}'
          volumes:
            - 'target:/workdir/target'
          environment:
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: c7a-xlarge
    retry: *retry_on_agent_kill

  - label: ':rust: :lock: Check cargo-deny'
    command: |
      [ -d public ] && cd public
      export RUST_BACKTRACE=full
      hard_fail=0
      soft_fail=0
      cargo --locked deny check bans licenses sources  || hard_fail=1
      cargo --locked deny check advisories             || soft_fail=1

      if [ $$hard_fail -eq 1 ]; then
        exit 1  # Hard fail for bans/licenses/sources
      elif [ $$soft_fail -eq 1 ]; then
        exit 3  # Soft fail for advisories only
      else
        exit 0
      fi
    plugins:
      - docker#${DOCKER_PLUGIN_VERSION}:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:${BUILDKITE_COMMIT}'
          environment:
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: c7a-2xlarge
    retry: *retry_on_agent_kill
    soft_fail:
      - exit_status: 3

  - label: ':clippy: Check clippy'
    key: check-clippy
    commands:
      - '[ -d public ] && cd public'
      - export RUST_BACKTRACE=full
      - cargo --locked clippy --workspace --all-targets --all-features -- -D warnings
    plugins:
      - docker#${DOCKER_PLUGIN_VERSION}:
          image: '305232526136.dkr.ecr.us-east-2.amazonaws.com/readyset-build:${BUILDKITE_COMMIT}'
          volumes:
            - 'target:/workdir/target'
          environment:
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: c7a-2xlarge
    retry: *retry_on_agent_kill

  - label: ":rust: Run tests (nextest, default upstreams, MRBR off): {{ matrix.arch }}"
    key: rust-tests
    command: |
      [ -d public ] && cd public
      ../.buildkite/retrieve_last_artifact.sh '**/proptest-regressions/*.txt'
      ../.buildkite/retrieve_last_artifact.sh '**/*.proptest-regressions'
      .buildkite/run-tests.sh
      echo "~~~ Show sccache stats"
      sccache --show-stats
    timeout_in_minutes: 60
    plugins:
      - docker-compose#${DOCKER_COMPOSE_PLUGIN_VERSION}:
          run: app
          tty: true           # nextest makes colored output if we use tty
          env:
            - BUILDKITE_PARALLEL_JOB
            - BUILDKITE_API_TOKEN             # buildkite vars needed to fetch regression artifacts
            - BUILDKITE_GRAPHQL_API_TOKEN
            - BUILDKITE_ORGANIZATION_SLUG
            - BUILDKITE_PIPELINE_SLUG
            - BUILDKITE_BRANCH
            - BUILDKITE_STEP_KEY
            - BUILDKITE_LABEL
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
            - MYSQL_HOST=mysql
            - MYSQL_PWD=noria
            - MYSQL_DB=noria
            - CARGO_TERM_PROGRESS_WHEN=never     # disable progress bars if tty=true
          volumes:
            - 'target:/workdir/target'
          config:
            - "${GIT_PUBLIC_ROOT}build/docker-compose.yml"
            - "${GIT_PUBLIC_ROOT}build/docker-compose.ci-default.yml"
          mount-buildkite-agent: true
          quiet-pull: true    # don't log all the image pulls
          pull-retries: 3
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: "{{ matrix.queue }}"
    retry: *retry_on_agent_kill
    matrix:
      setup:
        queue:
          - "c6a-4xlarge"
          - "c7g-4xlarge"
        arch:
          - "x86"
          - "arm"
      adjustments:
        - with:
            queue: "c6a-4xlarge"
            arch: "arm"
          skip: true
        - with:
            queue: "c7g-4xlarge"
            arch: "x86"
          skip: true

  - label: ':rust: Run tests (upstream: mysql80, MRBR on, not including slow tests)'
    key: rust-tests-mrbr
    command: |
      [ -d public ] && cd public
      ../.buildkite/retrieve_last_artifact.sh '**/proptest-regressions/*.txt'
      ../.buildkite/retrieve_last_artifact.sh '**/*.proptest-regressions'
      TEST_CATEGORY=nextest UPSTREAM_CONFIG=mysql80 MYSQL_MRBR=on .buildkite/run-tests.sh
      echo "~~~ Show sccache stats"
      sccache --show-stats
    timeout_in_minutes: 60
    plugins:
      - docker-compose#${DOCKER_COMPOSE_PLUGIN_VERSION}:
          run: app
          tty: true           # nextest makes colored output if we use tty
          env:
            - BUILDKITE_PARALLEL_JOB
            - BUILDKITE_API_TOKEN             # buildkite vars needed to fetch regression artifacts
            - BUILDKITE_GRAPHQL_API_TOKEN
            - BUILDKITE_ORGANIZATION_SLUG
            - BUILDKITE_PIPELINE_SLUG
            - BUILDKITE_BRANCH
            - BUILDKITE_STEP_KEY
            - BUILDKITE_LABEL
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
            - MYSQL_HOST=mysql
            - MYSQL_PWD=noria
            - MYSQL_DB=noria
            - CARGO_TERM_PROGRESS_WHEN=never     # disable progress bars if tty=true
          volumes:
            - 'target:/workdir/target'
          config:
            - "${GIT_PUBLIC_ROOT}build/docker-compose.yml"
            - "${GIT_PUBLIC_ROOT}build/docker-compose.ci-default.yml"
          mount-buildkite-agent: true
          quiet-pull: true    # don't log all the image pulls
          pull-retries: 3
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: c6a-4xlarge
    retry: *retry_on_agent_kill

  - label: ':rust: Run doctests :books:'
    key: rust-dectests
    command: |
      [ -d public ] && cd public
      ../.buildkite/retrieve_last_artifact.sh '**/proptest-regressions/*.txt'
      ../.buildkite/retrieve_last_artifact.sh '**/*.proptest-regressions'
      TEST_CATEGORY=doctest .buildkite/run-tests.sh
      echo "~~~ Show sccache stats"
      sccache --show-stats
    timeout_in_minutes: 60
    plugins:
      - docker-compose#${DOCKER_COMPOSE_PLUGIN_VERSION}:
          run: app
          tty: true           # nextest makes colored output if we use tty
          env:
            - BUILDKITE_PARALLEL_JOB
            - BUILDKITE_API_TOKEN             # buildkite vars needed to fetch regression artifacts
            - BUILDKITE_GRAPHQL_API_TOKEN
            - BUILDKITE_ORGANIZATION_SLUG
            - BUILDKITE_PIPELINE_SLUG
            - BUILDKITE_BRANCH
            - BUILDKITE_STEP_KEY
            - BUILDKITE_LABEL
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
            - MYSQL_HOST=mysql
            - MYSQL_PWD=noria
            - MYSQL_DB=noria
            - CARGO_TERM_PROGRESS_WHEN=never     # disable progress bars if tty=true
          volumes:
            - 'target:/workdir/target'
          config:
            - "${GIT_PUBLIC_ROOT}build/docker-compose.yml"
            - "${GIT_PUBLIC_ROOT}build/docker-compose.ci-default.yml"
          mount-buildkite-agent: true
          quiet-pull: true    # don't log all the image pulls
          pull-retries: 3
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: c6a-4xlarge
    retry: *retry_on_agent_kill

  - label: ":sqlite: Run logictest"
    key: logictest
    command:
      - 'echo +++ Running readyset-logictest'
      - '[ -d public ] && cd public'
      - './.buildkite/run-logictests.sh'
    timeout_in_minutes: 60
    plugins:
      - docker-compose#${DOCKER_COMPOSE_PLUGIN_VERSION}:
          run: app
          tty: true           # tests make colored output if we use tty
          env:
            - SCCACHE_BUCKET=readysettech-build-sccache-us-east-2
            - SCCACHE_REGION=us-east-2
            - CARGO_INCREMENTAL=0
            - RUST_BACKTRACE=full
            - CARGO_TERM_PROGRESS_WHEN=never     # disable progress bars if tty=true
            - LOG_LEVEL=${LOG_LEVEL:-info}
          config:
            - "${GIT_PUBLIC_ROOT}build/docker-compose.yml"
            - "${GIT_PUBLIC_ROOT}build/docker-compose.ci-default.yml"
            - "${GIT_PUBLIC_ROOT}build/docker-compose.ci-postgis-15.yml"
          quiet-pull: true    # don't log all the image pulls
          pull-retries: 3
      - docker-login#${DOCKER_LOGIN_PLUGIN_VERSION}:
          # Need to log in to avoid rate-limit while pulling postgis image. IMPORTANT: must run this
          # docker-login plugin *before* the ECR plugin!  Otherwise, pulls from ECR fail.
          server: "docker.io"
          username: readysetservices
          password-env: DOCKER_HUB_TOKEN
      - ecr#${ECR_PLUGIN_VERSION}:
          login: true
          retries: 3
    agents:
      queue: "c6a-4xlarge"
    retry: *retry_on_agent_kill
